#!/usr/bin/env bash

if ! (sed --version 2>/dev/null | grep -q GNU)
then
	if which gsed &>/dev/null
	then
		sed=gsed
	else
		echo "GNU sed not found." >&2
		exit 1
	fi
fi

pipe=pipe
trap "rm -f $pipe" EXIT
mkfifo $pipe

phase=1
method=
path=
cat $pipe | {
	while :
	do
		if [[ $phase -eq 1 ]]
		then
			declare -A header
			read request
			method=$(echo $request | cut -d' ' -f1)
			path="$(pwd)$(echo $request | cut -d' ' -f2)"
			((phase++))
		elif [[ $phase -eq 2 ]]
		then
			read line
			if [[ $line = $(echo -ne "\r") ]]
			then
				((phase++))
			else
				head=$(echo -n $line | tr -d '\r' | tr -d '\n')
				key=$(echo -n $head | $sed -r "s/ *$//;s/([^:]*?): *(.*)$/\1/")
				val=$(echo -n $head | $sed -r "s/ *$//;s/([^:]*?): *(.*)$/\2/")
				header[$key]="$val"
			fi
		elif [[ $phase -eq 3 ]]
		then
			# $path is not a regular file
			if ! [[ -f "$path" ]]
			then
				echo 'HTTP/1.1 404 Not Found'
				echo 'Content-Length: 0'
				echo
			# $path is not readable
			elif ! [[ -r "$path" ]]
			then
				echo 'HTTP/1.1 403 Forbidden'
				echo 'Content-Length: 0'
				echo
			# OK
			else
				# set mime type
				if [[ ${path##*.} = "html" ]]
				then
					mime='text/html'
				elif [[ ${path##*.} = "png" ]]
				then
					mime='image/png'
				elif [[ ${path##*.} = "jpg" ]] || [[ ${path##*.} = "jpeg" ]]
				then
					mime='image/jpeg'
				else
					mime='application/octet-stream'
				fi
				# send response
				echo 'HTTP/1.1 200 OK'
				echo "Content-Type: $mime"
				if [[ ${header[Accept-Encoding]} =~ gzip ]] && which gzip &>/dev/null
				then
					temp=$(mktemp)
					cat $path | gzip > $temp
					echo "Content-Encoding: gzip"
					echo "Content-Length: $(wc -c $temp | awk '{print $1}')"
					echo
					cat $temp
					rm $temp
				elif [[ ${header[Accept-Encoding]} =~ deflate ]] && which pigz &>/dev/null
				then
					temp=$(mktemp)
					pigz -cz $path > $temp
					echo "Content-Encoding: deflate"
					echo "Content-Length: $(wc -c $temp | awk '{print $1}')"
					echo
					cat $temp
					rm $temp
				else
					echo "Content-Length: $(wc -c $path | awk '{print $1}')"
					echo
					cat $path
				fi
			fi
			phase=1
			unset header
		fi
	done
} | nc -kl ${port:-3000} > $pipe
