#!/usr/bin/env bash

if ! ( [[ ${BASH_VERSINFO[0]} -ge 5 ]] || ([[ ${BASH_VERSINFO[0]} -eq 4 ]] && [[ ${BASH_VERSINFO[1]} -ge 3 ]]))
then
	echo "Bash ^4.3 required." >&2
	exit 1
fi

if ! which nkf &>/dev/null
then
	echo "nkf required." >&2
	exit 1
fi

readonly http_status=(
	[200]="OK"
	[400]="Bad Request"
	[403]="Forbidden"
	[404]="Not Found"
	[501]="Not Implemented"
)

readonly valid_methods=(
	"GET"
	"POST"
	"HEAD"
)

readonly html_format=$(cat << EOF
<html>
<head><title>%s</title></head>
<body><h1><center>%d %s</center></h1><hr><center>shttpd</center></body>
</html>
EOF
)

function render {
	local body=$(printf "$html_format" "${http_status[$1]}" $1 "${http_status[$1]}")
	printf "HTTP/1.1 %d %s\r\n" $1 "${http_status[$1]}"
	printf "Content-Type: text/html\r\n"
	printf "Content-Length: %d\r\n\r\n" ${#body}
	echo -n "$body"
}

function in_array {
	local -n haystack=$1
	local needle=$2
	for val in "${haystack[@]}"
	do
		if [[ $val = $needle ]]
		then
			return 0
		fi
	done
	return 1
}

function mime_from_ext {
	local mime
	case ${request_uri##*.} in
		html)
			mime='text/html';;
		css)
			mime='text/css';;
		js)
			mime='text/javascript';;
		txt)
			mime='text/plain';;
		png)
			mime='image/png';;
		jpg|jpeg)
			mime='image/jpeg';;
		*)
			mime='application/octet-stream';;
	esac
	printf "%s" $mime
}

function parse_uri {
	local -n _parsed_uri=$1
	local -r _request_uri=$2
	local -n _status_code=$3
	local _query_string _file_path _path_info
	if [[ $_request_uri =~ \? ]]
	then
		_query_string=?${_request_uri#*\?}
		_path_info=${_request_uri%%\?*}
	else
		_query_string=
		_path_info=$_request_uri
	fi

	# preparation: remove / from $_path_info
	while ! [[ -z $_path_info ]]
	do
		# put each _path step from $_path_info to $_path
		_path_info=${_path_info#/}
		_file_path="$_file_path/${_path_info%%/*}"
		if [[ $_path_info =~ / ]]
		then
			_path_info=${_path_info#*/}
		else
			_path_info=
		fi
		if ! [[ -z $_path_info ]]
		then
			_path_info="/$_path_info"
		fi
		# $_path not exists
		if ! [[ -e $PWD$_file_path ]]
		then
			_status_code=404
			break
		# $_path is not directory (file found)
		elif ! [[ -d $PWD$_file_path ]]
		then
			_status_code=200
			break
		fi
	done
	_parsed_uri[query_string]=$_query_string
	_parsed_uri[file_path]=$_file_path
	_parsed_uri[path_info]=$(echo -n $_path_info | nkf -w --url-input)
}

function main {
	local -A request_header
	local -a stat
	local -i phase=1
	local -r scheme="${SCHEME:-http}"
	local entity_body method request_uri
	local request_line request_header_line
	local key val
	local -r temp=$(mktemp)

	trap "rm -f $temp" EXIT

	while :
	do
		# Phase 1: Request Line
		if [[ $phase -eq 1 ]]
		then
			read request_line
			method=${request_line%% *}
			request_uri="${request_line#* }"
			request_uri="${request_uri%% *}"
			# given method is not valid
			if ! in_array valid_methods $method
			then
				render 501
				exit
			fi
			((phase++))
		# Phase 2: Request Headers
		elif [[ $phase -eq 2 ]]
		then
			read request_header_line
			if [[ $request_header_line = $(printf "\r") ]]
			then
				((phase++))
			else
				request_header_line=${request_header_line%%\r\n}
				key="${request_header_line%%: *}"
				val="${request_header_line#*: }"
				val="${val%$(printf "\r")}"
				request_header[$key]="$val"
			fi
		# Phase 3: Request Body
		elif [[ $phase -eq 3 ]]
		then
			if ! [[ -z ${request_header[Content-Length]} ]]
			then
				read -rd' ' -n${request_header[Content-Length]} entity_body
			fi
			((phase++))
		# Phase 4: Response
		elif [[ $phase -eq 4 ]]
		then
			local -A parsed_uri #([file_path], [path_info], [query_string])
			local -i status_code
			parse_uri parsed_uri "$request_uri" status_code
			local file_path="$PWD${parsed_uri[file_path]}"
			# avoid path traversal
			if ! [[ "$(realpath "$file_path")" =~ ^$PWD ]]
			then
				render 403
			# file not exists
			elif [[ $status_code -ne 200 ]]
			then
				render $status_code
			# $request_uri is not readable
			elif ! [[ -r "$file_path" ]]
			then
				render 403
			# OK: cgi
			elif [[ ${file_path##*.} = "cgi" ]]
			then
				if [[ -x "$file_path" ]]
				then
					echo 'HTTP/1.1 200 OK'
					if [[ $method == GET ]]
					then
						entity_body=
					fi
					# Execute CGI
					echo -n "$entity_body" | \
						CONTENT_LENGTH=${request_header[Content-Length]} \
						CONTENT_TYPE=${request_header[Content-Type]} \
						QUERY_STRING=${parsed_uri[query_string]} \
						PATH_INFO=${parsed_uri[path_info]} \
						PATH_TRANSLATED="${scheme}://${request_header[Host]}$request_uri" \
						$PWD${parsed_uri[file_path]}
				else
					render 403
				fi
			# OK: static content
			else
				# send response
				echo 'HTTP/1.1 200 OK'
				echo "Content-Type: $(mime_from_ext ${file_path##*.})"
				# Check Accept-Encoding in order
				while ! [[ -z "${request_header[Accept-Encoding]}" ]]
				do
					if [[ "${request_header[Accept-Encoding]%%, *}" = gzip ]] && which gzip &>/dev/null
					then
						cat $file_path | gzip --best > $temp
						stat=($(ls -l $temp))
						echo "Content-Length: ${stat[4]}"
						echo "Content-Encoding: gzip"
						echo
						cat $temp
						break
					elif [[ "${request_header[Accept-Encoding]%%, *}" = deflate ]] && which pigz &>/dev/null
					then
						pigz -cz --best $file_path > $temp
						stat=($(ls -l $temp))
						echo "Content-Length: ${stat[4]}"
						echo "Content-Encoding: deflate"
						echo
						cat $temp
						break
					fi
					request_header[Accept-Encoding]="${request_header[Accept-Encoding]#*, }"
				done
				# not compressed (= "Accept-Encoding: identity")
				if [[ -z "${request_header[Accept-Encoding]}" ]]
				then
					stat=($(ls -l $file_path))
					echo "Content-Length: ${stat[4]}"
					echo
					cat $file_path
				fi
			fi
			exit
		fi
	done
}

main
